<?xml version="1.0" encoding="utf-8"?>
<nugget name="ALV_TREE_UTIL">
 <CLAS CLSNAME="ZCL_GUI_ALV_TREE_UTIL" VERSION="1" LANGU="F" DESCRIPT="Classe utilitaire pour ALV Tree" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TY_NODE_DATA" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="4 " SRCCOLUMN1="4 " SRCROW2="14 " SRCCOLUMN2="24 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_node_data,
      parent_node_id TYPE        sysuuid_x16,
      node_id        TYPE        sysuuid_x16,
      node_data      TYPE REF TO data,
      fieldname      TYPE string,
      node_text      TYPE        lvc_value,
      node_layout    TYPE        lvc_s_layn,
      t_item_layout  TYPE        lvc_t_layi,
      node_level_key TYPE        string,
      has_child      TYPE        flag,
    END OF   ty_node_data
"/>
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TY_T_NODE_DATA" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="16 " SRCCOLUMN1="4 " SRCROW2="17 " SRCCOLUMN2="92 " TYPESRC_LENG="0 " TYPESRC="ty_t_node_data TYPE SORTED TABLE OF ty_node_data
                                WITH UNIQUE KEY primary_key COMPONENTS parent_node_id node_id
"/>
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TY_KEY" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="19 " SRCCOLUMN1="4 " SRCROW2="22 " SRCCOLUMN2="18 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_key,
      key     TYPE string,
      node_id TYPE sysuuid_x16,
    END OF   ty_key
"/>
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TY_T_KEY" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="24 " SRCCOLUMN1="4 " SRCROW2="25 " SRCCOLUMN2="67 " TYPESRC_LENG="0 " TYPESRC="ty_t_key TYPE SORTED TABLE OF ty_key
                          WITH UNIQUE KEY primary_key COMPONENTS key
"/>
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TS_NODE_TEXT_DYNAMIC" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="6 " SRCROW2="15 " SRCCOLUMN2="34 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ts_node_text_dynamic,
        fieldname     TYPE string,
        separator     TYPE string,
        alpha_in      TYPE flag,
        condense      TYPE flag,
        even_if_empty TYPE flag,
      END OF   ts_node_text_dynamic
"/>
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TT_NODE_TEXT_DYNAMIC" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="6 " SRCROW2="18 " SRCCOLUMN2="75 " TYPESRC_LENG="0 " TYPESRC="tt_node_text_dynamic TYPE STANDARD TABLE OF ts_node_text_dynamic
                        WITH NON-UNIQUE KEY primary_key COMPONENTS fieldname
"/>
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TY_HIERARCHY" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="20 " SRCCOLUMN1="6 " SRCROW2="34 " SRCCOLUMN2="26 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_hierarchy,
        node_level               TYPE i,
        fieldname                TYPE name_komp,
        t_component_display      TYPE cgpl_field_names,
        t_component_excluded     TYPE cgpl_field_names,
        node_text_fixed          TYPE string,
        node_text_dynamic        TYPE zcl_gui_alv_tree_util=&gt;tt_node_text_dynamic,
        node_text_separator      TYPE string,
        node_text_alpha_in       TYPE flag,
        node_layout              TYPE lvc_s_layn,
        t_item_layout            TYPE lvc_t_layi,
        node_level_key_fieldname TYPE name_komp,
        hide_if_empty            TYPE flag,
        hide_if_null             TYPE flag,
      END OF   ty_hierarchy
"/>
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TY_T_HIERARCHY" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="36 " SRCCOLUMN1="6 " SRCROW2="38 " SRCCOLUMN2="103 " TYPESRC_LENG="0 " TYPESRC="ty_t_hierarchy TYPE SORTED TABLE OF ty_hierarchy
                                                  WITH UNIQUE KEY primary_key COMPONENTS node_level
                                                  WITH UNIQUE SORTED KEY second_key COMPONENTS fieldname
"/>
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TY_LEVEL_NODE_KEY" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="4" SRCROW1="40 " SRCCOLUMN1="6 " SRCROW2="47 " SRCCOLUMN2="31 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_level_node_key,
        node_text          TYPE string,
        node_key           TYPE lvc_nkey,
        fieldname          TYPE string,
        node_text_complete TYPE string,
        node_level_key     TYPE string,
        parent_node_key    TYPE lvc_nkey,
      END OF   ty_level_node_key
"/>
  <types CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="TY_T_LEVEL_NODE_KEY" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="6 " TYPTYPE="4" SRCROW1="49 " SRCCOLUMN1="6 " SRCROW2="50 " SRCCOLUMN2="98 " TYPESRC_LENG="0 " TYPESRC="ty_t_level_node_key TYPE STANDARD TABLE OF ty_level_node_key
                                               WITH NON-UNIQUE KEY primary_key COMPONENTS node_text
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeClasDef CLSNAME="ZCL_GUI_ALV_TREE_UTIL" TYPEGROUP="ZCL_GUI_ALV_TREE_UTIL" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="MO_ALV_TREE" VERSION="1" LANGU="F" DESCRIPT="ALV Tree Control" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_ALV_TREE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="MT_KEY" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TY_T_KEY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="MT_NODE_DATA" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TY_T_NODE_DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ADD_TO_APPROPRIATE_NODE" VERSION="1" LANGU="F" DESCRIPT="Ajout dans le Noeud approprié" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ADD_TO_APPROPRIATE_NODE" SCONAME="IS_DATA" VERSION="1" LANGU="F" DESCRIPT="Données à afficher" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ADD_TO_APPROPRIATE_NODE" SCONAME="IT_HIERARCHY" VERSION="1" LANGU="F" DESCRIPT="Hiérarchie" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_GUI_ALV_TREE_UTIL=&gt;TY_T_HIERARCHY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ADD_TO_APPROPRIATE_NODE" SCONAME="IT_COMPONENT_KEY" VERSION="1" LANGU="F" DESCRIPT="Table avec noms de zones" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CGPL_FIELD_NAMES" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ADD_TO_APPROPRIATE_NODE" SCONAME="IS_HIERARCHY_LOWER" VERSION="1" LANGU="F" DESCRIPT="Hiérarchie - Niveau le plus bas" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_GUI_ALV_TREE_UTIL=&gt;TY_HIERARCHY" PAROPTIONL="X"/>
   <source>METHOD add_to_appropriate_node.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : ADD_TO_APPROPRIATE_NODE                           *
*&amp; Classe          : ZCL_GUI_ALV_TREE_UTIL                             *
*&amp; Description     : Ajout de l&apos;entrée dans le Noeud approprié         *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 28/01/2016                                           *
*                                                                      *
*&amp; Responsable Technique  : Véhier Olivier                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                             TABLES                                 **
***------------------------------------------------------------------***
  DATA :
      lt_node_text_fieldname TYPE stringtab.

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_key       TYPE ty_key,
    ls_node_data TYPE ty_node_data,
    ls_hierarchy TYPE ty_hierarchy.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_data TYPE REF TO data.

***------------------------------------------------------------------***
**                            VARIABLES                               **
***------------------------------------------------------------------***
  DATA :
    lv_key            TYPE string,
    lv_key_value      TYPE string,
    lv_node_text      TYPE string,
    lv_node_level     TYPE int4,
    lv_last_node_id   TYPE sysuuid_x16,
    lv_node_level_key TYPE string.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
  FIELD-SYMBOLS :
    &lt;lfs_key_value&gt;      TYPE any,
    &lt;lfs_node_data&gt;      TYPE any,
    &lt;lfs_node_level_key&gt; TYPE any.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Constitution de la Clef et détermination du Noeud où
  &quot; ajouter l&apos;entrée
  &quot; -----------------------------------------------------------

  &quot; Parcours l&apos;ensemble des Clefs
  LOOP AT it_component_key ASSIGNING FIELD-SYMBOL(&lt;lfs_s_component_key&gt;).

    &quot; Incrémentation niveau Hiérarchique
    ADD 1 TO lv_node_level.

    &quot; Récupération de la valeur de la clef
    ASSIGN COMPONENT &lt;lfs_s_component_key&gt; OF STRUCTURE is_data
                                                     TO &lt;lfs_key_value&gt;.
    IF sy-subrc NE 0.
      &quot; Pas de correspondance
      &quot;&quot;  --&gt; Passe à l&apos;itération suivante
      CONTINUE.

    ENDIF.

    IF lv_key IS INITIAL.
      &quot; Initialisation de la Clef
      lv_key = &lt;lfs_key_value&gt;.

    ELSE.
      &quot; Concaténe la clef
      lv_key_value = |{ &lt;lfs_key_value&gt; }|.
      CONCATENATE lv_key lv_key_value INTO lv_key RESPECTING BLANKS.

    ENDIF.

    TRY.
        &quot; Récupération du Noeud correspondant à cette clef
        lv_last_node_id = me-&gt;mt_key[ key = lv_key ]-node_id.

      CATCH cx_sy_itab_line_not_found.
        &quot; Le Noeud correspondant à cette clef n&apos;existe pas
        &quot;&quot;  --&gt; Récupération données Hiérarchique
        CLEAR : ls_hierarchy.
        READ TABLE it_hierarchy WITH TABLE KEY node_level = lv_node_level
                                          INTO ls_hierarchy.

        IF  &lt;lfs_key_value&gt; IS INITIAL
        AND ls_hierarchy-hide_if_empty EQ abap_true.
          &quot; Ne pas afficher si vide
          &quot;&quot;  --&gt; Passe à l&apos;itération suivante
          CONTINUE.

        ENDIF.

        &quot; Initialisation des données à afficher
        lo_data = zcl_gui_alv_tree_util=&gt;display_data_set(
          is_data               = is_data
          it_component_display  = ls_hierarchy-t_component_display
          it_component_excluded = ls_hierarchy-t_component_excluded
        ).

        &quot; Initialisation pointeur sur les données
        ASSIGN lo_data-&gt;* TO &lt;lfs_node_data&gt;.

        &quot; Initialisation Texte du Noeud
        lv_node_text = zcl_gui_alv_tree_util=&gt;_node_text_set(
          is_data      = is_data
          is_hierarchy = ls_hierarchy
        ).

        IF NOT ls_hierarchy-node_level_key_fieldname IS INITIAL.
          &quot; Récupération valeur Clef niveau de Noeud
          ASSIGN COMPONENT ls_hierarchy-node_level_key_fieldname
              OF STRUCTURE &lt;lfs_node_data&gt;
                        TO &lt;lfs_node_level_key&gt;.
          lv_node_level_key = &lt;lfs_node_level_key&gt;.

        ENDIF.

        &quot;&quot;  --&gt; Création du Noeud
        ls_key-node_id = me-&gt;node_data_add(
          is_data           = &lt;lfs_node_data&gt;
          iv_fieldname      = ls_hierarchy-fieldname
          iv_node_text      = lv_node_text
          iv_has_child      = abap_true
          is_node_layout    = ls_hierarchy-node_layout
          it_item_layout    = ls_hierarchy-t_item_layout
          iv_node_level_key = lv_node_level_key
          iv_parent_node_id = lv_last_node_id
        ).

        &quot;&quot;  --&gt; Création d&apos;une nouvelle entrée
        ls_key-key = lv_key.
        INSERT ls_key INTO TABLE me-&gt;mt_key.

        &quot;&quot;  --&gt; Initialisation dernière clef
        lv_last_node_id = ls_key-node_id.

    ENDTRY.

  ENDLOOP.

  &quot; -----------------------------------------------------------
  &quot; Création Noeud le plus bas
  &quot; -----------------------------------------------------------

  &quot; Récupération valeur du champ à afficher
  ASSIGN COMPONENT is_hierarchy_lower-fieldname
      OF STRUCTURE is_data TO &lt;lfs_key_value&gt;.
  IF  &lt;lfs_key_value&gt; IS INITIAL
  AND is_hierarchy_lower-hide_if_empty EQ abap_true.
    &quot; Ne pas afficher si vide
    &quot;&quot;  --&gt; Arrêt du traitement
    RETURN.

  ENDIF.

  IF NOT is_hierarchy_lower-node_level_key_fieldname IS INITIAL.
    &quot; Récupération valeur Clef niveau de Noeud
    ASSIGN COMPONENT is_hierarchy_lower-node_level_key_fieldname
        OF STRUCTURE is_data TO &lt;lfs_node_level_key&gt;.
    IF  &lt;lfs_node_level_key&gt; IS INITIAL
    AND is_hierarchy_lower-hide_if_null EQ abap_true.
      &quot; Ne pas afficher si vide
      &quot;&quot;  --&gt; Arrêt du traitement
      RETURN.

    ENDIF.

  ENDIF.

  &quot; Initialisation Texte du Noeud
  lv_node_text = zcl_gui_alv_tree_util=&gt;_node_text_set(
    is_data      = is_data
    is_hierarchy = is_hierarchy_lower
  ).

  &quot; Initialisation des données à afficher
  lo_data = zcl_gui_alv_tree_util=&gt;display_data_set(
    is_data               = is_data
    it_component_display  = is_hierarchy_lower-t_component_display
    it_component_excluded = is_hierarchy_lower-t_component_excluded
  ).

  &quot; Initialisation pointeur sur les données à afficher
  ASSIGN lo_data-&gt;* TO &lt;lfs_node_data&gt;.

  IF NOT ls_hierarchy-node_level_key_fieldname IS INITIAL.
    &quot; Récupération valeur Clef niveau de Noeud
    ASSIGN COMPONENT ls_hierarchy-node_level_key_fieldname OF STRUCTURE &lt;lfs_node_data&gt;
                                                                     TO &lt;lfs_node_level_key&gt;.
    lv_node_level_key = &lt;lfs_node_level_key&gt;.

  ENDIF.

  &quot; Création du Noeud
  me-&gt;node_data_add(
    is_data           = &lt;lfs_node_data&gt;
    iv_node_text      = lv_node_text
    iv_has_child      = abap_false
    iv_fieldname      = is_hierarchy_lower-fieldname
    is_node_layout    = is_hierarchy_lower-node_layout
    it_item_layout    = is_hierarchy_lower-t_item_layout
    iv_node_level_key = lv_node_level_key
    iv_parent_node_id = lv_last_node_id
  ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ALV_TREE_POPULATE" VERSION="1" LANGU="F" DESCRIPT="Alimentation de l&apos;ALV (Manuel)" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ALV_TREE_POPULATE" SCONAME="ET_LEVEL_NODE_KEY" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_T_LEVEL_NODE_KEY"/>
   <source>METHOD alv_tree_populate.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : ALV_TREE_POPULATE                                 *
*&amp; Classe          : ZCL_GUI_ALV_TREE_UTIL                             *
*&amp; Description     : Alimentation ALV Tree à partir des Noeuds chargés *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 28/01/2016                                           *
*                                                                      *
*&amp; Responsable Technique  : Véhier Olivier                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  REFRESH : et_level_node_key.

  &quot; -----------------------------------------------------------
  &quot; Alimentation de l&apos;ALV Tree
  &quot; -----------------------------------------------------------

  LOOP AT me-&gt;mt_node_data ASSIGNING FIELD-SYMBOL(&lt;lfs_s_node_data&gt;).

    &quot; Ajout et de ses enfants
    me-&gt;node_add_recursive(
      EXPORTING
        is_node_data           = &lt;lfs_s_node_data&gt;
        iv_fill_level_node_key = boolc( et_level_node_key IS SUPPLIED )
      CHANGING
        ct_level_node_key      = et_level_node_key
    ).

    &quot; Allège la table au fur et à mesure
    DELETE me-&gt;mt_node_data USING KEY loop_key.

  ENDLOOP.

  &quot; ----------------------------------------------------------
  &quot; Mise à jour des données à afficher
  &quot; -----------------------------------------------------------

  me-&gt;mo_alv_tree-&gt;update_calculations( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ALV_TREE_POPULATE_AUTO" VERSION="1" LANGU="F" DESCRIPT="Alimentation de l&apos;ALV (Automatique)" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ALV_TREE_POPULATE_AUTO" SCONAME="IT_ALV_TREE_DATA" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="INDEX TABLE"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ALV_TREE_POPULATE_AUTO" SCONAME="IT_HIERARCHY" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_GUI_ALV_TREE_UTIL=&gt;TY_T_HIERARCHY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ALV_TREE_POPULATE_AUTO" SCONAME="ET_LEVEL_NODE_KEY" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_T_LEVEL_NODE_KEY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="ALV_TREE_POPULATE_AUTO" SCONAME="CO_ALV_TREE" VERSION="1" LANGU="F" DESCRIPT="ALV Tree Control" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_GUI_ALV_TREE"/>
   <source>METHOD alv_tree_populate_auto.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : ALV_TREE_POPULATE_AUTO                            *
*&amp; Classe          : ZCL_GUI_ALV_TREE_UTIL                             *
*&amp; Description     : Alimentation automatique de l&apos;ALV Tree            *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 28/01/2016                                           *
*                                                                      *
*&amp; Responsable Technique  : Véhier Olivier                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                             TABLES                                 **
***------------------------------------------------------------------***
  DATA :
    lt_sort_table    TYPE abap_sortorder_tab,
    lt_component_key TYPE cgpl_field_names.

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_sort_table TYPE abap_sortorder.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_alv_tree_util TYPE REF TO zcl_gui_alv_tree_util.

***------------------------------------------------------------------***
**                            VARIABLES                               **
***------------------------------------------------------------------***
  DATA :
    lv_lines TYPE i.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  REFRESH : et_level_node_key.

  &quot; -----------------------------------------------------------
  &quot; Création de l&apos;instance utilitaire
  &quot; -----------------------------------------------------------

  CREATE OBJECT lo_alv_tree_util
    EXPORTING
      io_alv_tree = co_alv_tree.

  &quot; Suppression de tous les Noeuds existant
  co_alv_tree-&gt;delete_all_nodes( ).

  &quot; -----------------------------------------------------------
  &quot; Constitution des champs clefs
  &quot; -----------------------------------------------------------

  LOOP AT it_hierarchy ASSIGNING FIELD-SYMBOL(&lt;lfs_s_hierarchy&gt;).&quot;TO lines( it_hierarchy ) - 1.

    IF sy-tabix LE lines( it_hierarchy ) - 1.
      &quot; Ajout du champ Clef
      APPEND &lt;lfs_s_hierarchy&gt;-fieldname TO lt_component_key.

    ENDIF.

    &quot; Ajout dans la table de Tri
    ls_sort_table-name = &lt;lfs_s_hierarchy&gt;-fieldname.
    APPEND ls_sort_table TO lt_sort_table.

  ENDLOOP.

  &quot; Récupération de la personnalisation du dernier niveau
  READ TABLE it_hierarchy INDEX lines( it_hierarchy ) ASSIGNING FIELD-SYMBOL(&lt;lfs_s_hierarchy_lower&gt;).

  &quot; -----------------------------------------------------------
  &quot; Constitution des champs clefs
  &quot; -----------------------------------------------------------

  SORT it_alv_tree_data BY (lt_sort_table).

  &quot; -----------------------------------------------------------
  &quot; Alimentation des Noeuds (interne)
  &quot; -----------------------------------------------------------

  LOOP AT it_alv_tree_data ASSIGNING FIELD-SYMBOL(&lt;lfs_s_alv_tree_data&gt;).

    &quot; Place la donnée dans le Noeud appropriée (Création Noeud Racine et Enfant si besoin)
    lo_alv_tree_util-&gt;add_to_appropriate_node(
        is_data            = &lt;lfs_s_alv_tree_data&gt;
        it_hierarchy       = it_hierarchy
        it_component_key   = lt_component_key
        is_hierarchy_lower = &lt;lfs_s_hierarchy_lower&gt;
    ).

  ENDLOOP.

  &quot; -----------------------------------------------------------
  &quot; Initialisation des Noeuds de l&apos;ALV (ALV Tree)
  &quot; -----------------------------------------------------------

  IF et_level_node_key IS SUPPLIED.
    &quot; Avec récupération des Niveaux
    lo_alv_tree_util-&gt;alv_tree_populate( IMPORTING et_level_node_key = et_level_node_key ).

  ELSE.
    &quot; Sans récupération des Niveaux
    lo_alv_tree_util-&gt;alv_tree_populate( ).

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="F" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="CONSTRUCTOR" SCONAME="IO_ALV_TREE" VERSION="1" LANGU="F" DESCRIPT="ALV Tree Control" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_GUI_ALV_TREE" PARPREFERD="X"/>
   <source>METHOD constructor.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : CONSTRUCTOR                                       *
*&amp; Classe          : ZCL_GUI_ALV_TREE_UTIL                             *
*&amp; Description     : Création d&apos;une instance                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 28/01/2016                                           *
*                                                                      *
*&amp; Responsable Technique  : Véhier Olivier                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Initialisation des attributs
  &quot; -----------------------------------------------------------

  me-&gt;mo_alv_tree = io_alv_tree.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="DISPLAY_DATA_SET" VERSION="1" LANGU="F" DESCRIPT="Initialisation des données à afficher" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="DISPLAY_DATA_SET" SCONAME="IS_DATA" VERSION="1" LANGU="F" DESCRIPT="Données source" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="DISPLAY_DATA_SET" SCONAME="IT_COMPONENT_DISPLAY" VERSION="1" LANGU="F" DESCRIPT="Table des champs à afficher" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CGPL_FIELD_NAMES"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="DISPLAY_DATA_SET" SCONAME="IT_COMPONENT_EXCLUDED" VERSION="1" LANGU="F" DESCRIPT="Table des champs excluses" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CGPL_FIELD_NAMES"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="DISPLAY_DATA_SET" SCONAME="RO_DATA" VERSION="1" LANGU="F" DESCRIPT="Données à afficher" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD display_data_set.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : DISPLAY_DATA_SET                                  *
*&amp; Classe          : ZCL_GUI_ALV_TREE_UTIL                             *
*&amp; Description     : Initialisation des données à afficher             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 28/01/2016                                           *
*                                                                      *
*&amp; Responsable Technique  : Véhier Olivier                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
  FIELD-SYMBOLS :
    &lt;lfs_value_source&gt; TYPE any,
    &lt;lfs_value_target&gt; TYPE any.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Création de la structure de Travail
  &quot; -----------------------------------------------------------

  &quot; Création de la donnée
  CREATE DATA ro_data LIKE is_data.
  ASSIGN ro_data-&gt;* TO FIELD-SYMBOL(&lt;lfs_data&gt;).

  &quot; -----------------------------------------------------------
  &quot; Initialisation des données à afficher
  &quot; -----------------------------------------------------------

  IF it_component_display[] IS INITIAL.
    &quot; Affiche toutes les données
    MOVE-CORRESPONDING is_data TO &lt;lfs_data&gt;.

    &quot; Exclusion des données à afficher
    IF NOT it_component_excluded[] IS INITIAL.

      LOOP AT it_component_excluded ASSIGNING FIELD-SYMBOL(&lt;lfs_s_component_excluded&gt;).

        UNASSIGN : &lt;lfs_value_source&gt;, &lt;lfs_value_target&gt;.

        &quot; Initialisation pointeur sur champ cible
        ASSIGN COMPONENT &lt;lfs_s_component_excluded&gt;
            OF STRUCTURE &lt;lfs_data&gt;
                      TO &lt;lfs_value_target&gt;.
        IF sy-subrc NE 0.
          &quot; Pas de correspondance
          &quot;&quot;  --&gt; Passe à l&apos;itération suivante
          CONTINUE.

        ENDIF.

        CLEAR : &lt;lfs_value_target&gt;.

      ENDLOOP.

    ENDIF.

  ELSE.
    &quot; Initialisation des données à afficher
    LOOP AT it_component_display ASSIGNING FIELD-SYMBOL(&lt;lfs_s_component_display&gt;).

      UNASSIGN : &lt;lfs_value_source&gt;, &lt;lfs_value_target&gt;.

      &quot; Initialisation pointeur sur champ source
      ASSIGN COMPONENT &lt;lfs_s_component_display&gt;
          OF STRUCTURE is_data
                    TO &lt;lfs_value_source&gt;.
      IF sy-subrc NE 0.
        &quot; Pas de correspondance
        &quot;&quot;  --&gt; Passe à l&apos;itération suivante
        CONTINUE.

      ENDIF.

      &quot; Initialisation pointeur sur champ cible
      ASSIGN COMPONENT &lt;lfs_s_component_display&gt;
                    OF STRUCTURE &lt;lfs_data&gt;
                    TO &lt;lfs_value_target&gt;.

      &quot; initialisation de la valeur
      &lt;lfs_value_target&gt; = &lt;lfs_value_source&gt;.

    ENDLOOP.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="EXPORT_TO_EXCEL" VERSION="1" LANGU="F" DESCRIPT="Export des données sous Excel" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="EXPORT_TO_EXCEL" SCONAME="IO_ALV_TREE" VERSION="1" LANGU="F" DESCRIPT="ALV Tree Control" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_GUI_ALV_TREE"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="EXPORT_TO_EXCEL" SCONAME="IV_FILENAME" VERSION="1" LANGU="F" DESCRIPT="Nom du fichier" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="EXPORT_TO_EXCEL" SCONAME="IV_FILEPATH" VERSION="1" LANGU="F" DESCRIPT="Chemin du fichier" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="EXPORT_TO_EXCEL" SCONAME="IV_WORKSHEET_NAME" VERSION="1" LANGU="F" DESCRIPT="Nom de la feuille de travail" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="EXPORT_TO_EXCEL" SCONAME="RV_SUBRC" VERSION="1" LANGU="F" DESCRIPT="Zone système ABAP : code retour des instructions ABAP" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-SUBRC"/>
   <source>METHOD export_to_excel.

***------------------------------------------------------------------***
**                             TABLES                                 **
***------------------------------------------------------------------***
  DATA :
    lt_solix         TYPE solix_tab,
    lt_children      TYPE lvc_t_nkey,
    lt_components    TYPE abap_component_tab,
    lt_fieldcatalog  TYPE lvc_t_fcat,
    lt_subtree_nodes TYPE lvc_t_nkey.

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_components     TYPE abap_componentdescr,
    ls_table_settings TYPE zexcel_s_table_settings.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lot_outtab      TYPE REF TO data,
    lo_datadescr    TYPE REF TO cl_abap_datadescr,
    lo_outtab_line  TYPE REF TO data,
    lo_table_descr  TYPE REF TO cl_abap_tabledescr,
    lo_struct_descr TYPE REF TO cl_abap_structdescr.

  DATA :
    lo_excel        TYPE REF TO zcl_excel,
    lo_worksheet    TYPE REF TO zcl_excel_worksheet,
    lo_excel_writer TYPE REF TO zcl_excel_writer_2007.

***------------------------------------------------------------------***
**                            VARIABLES                               **
***------------------------------------------------------------------***
  DATA :
    lv_path     TYPE string,
    lv_xstrlen  TYPE i,
    lv_xstring  TYPE xstring,
    lv_filename TYPE string,
    lv_fullpath TYPE string.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
  FIELD-SYMBOLS :
    &lt;lfs_s_outtab&gt; TYPE                 any,
    &lt;lfs_t_outtab&gt; TYPE STANDARD TABLE.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Récupération du FieldCatalog
  &quot; -----------------------------------------------------------

  io_alv_tree-&gt;get_frontend_fieldcatalog(
    IMPORTING
      et_fieldcatalog   = lt_fieldcatalog
    EXCEPTIONS
      error_get_width   = 1
      cntl_system_error = 2
      dp_error          = 3
      failed            = 4
      OTHERS            = 5
  ).
  IF sy-subrc NE 0.
    &quot; Une erreur est survenue
    &quot;&quot;  --&gt; Arrêt du traitement
    RETURN.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Constitution du type de la ligne
  &quot; -----------------------------------------------------------

  LOOP AT lt_fieldcatalog ASSIGNING FIELD-SYMBOL(&lt;lfs_s_fieldcatalog&gt;).

    CLEAR : ls_components.

    ls_components-name = &lt;lfs_s_fieldcatalog&gt;-fieldname.
    ls_components-type ?= cl_abap_datadescr=&gt;describe_by_name( &lt;lfs_s_fieldcatalog&gt;-rollname ).
    APPEND ls_components TO lt_components.

  ENDLOOP.

  TRY.
      &quot; Création de la structure dynamique
      lo_struct_descr ?= cl_abap_structdescr=&gt;create( lt_components ).

      &quot; Création du type de ligne
      CREATE DATA lo_outtab_line TYPE HANDLE lo_struct_descr.
      ASSIGN lo_outtab_line-&gt;* TO &lt;lfs_s_outtab&gt;.

      &quot; Création de la table dynamique
      lo_datadescr ?= lo_struct_descr.
      lo_table_descr = cl_abap_tabledescr=&gt;create( p_line_type = lo_datadescr ).

      &quot; Création de la table dynmaique
      CREATE DATA lot_outtab TYPE HANDLE lo_table_descr.
      ASSIGN lot_outtab-&gt;* TO &lt;lfs_t_outtab&gt;.

    CATCH cx_sy_struct_creation cx_sy_table_creation.

  ENDTRY.

  &quot; -----------------------------------------------------------
  &quot; Récupération de tous les noeuds
  &quot; -----------------------------------------------------------

  io_alv_tree-&gt;get_subtree(
    EXPORTING
      i_node_key         = cl_gui_alv_tree=&gt;c_virtual_root_node
    IMPORTING
      et_subtree_nodes   = lt_subtree_nodes
    EXCEPTIONS
      node_key_not_found = 1
      OTHERS             = 2
  ).
  IF sy-subrc NE 0.
    &quot; Une erreur est survenue
    &quot;&quot;  --&gt; Arrêt du traitement
    RETURN.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Récupération des données affichées
  &quot; -----------------------------------------------------------

  LOOP AT lt_subtree_nodes ASSIGNING FIELD-SYMBOL(&lt;lfs_s_subtree_nodes&gt;).

    &quot; Récupération des Noeuds enfants
    io_alv_tree-&gt;get_children(
      EXPORTING
        i_node_key         = &lt;lfs_s_subtree_nodes&gt;
      IMPORTING
        et_children        = lt_children
      EXCEPTIONS
        historic_error     = 1
        node_key_not_found = 2
        OTHERS             = 3
    ).
    IF sy-subrc           EQ 0
    AND NOT lt_children[] IS INITIAL.
      &quot; Niveau parent
      &quot;&quot;  --&gt; Passe à l&apos;itération suivante
      CONTINUE.

    ENDIF.

    &quot; Récupération des données affichées
    io_alv_tree-&gt;get_outtab_line(
      EXPORTING
        i_node_key     = &lt;lfs_s_subtree_nodes&gt;
      IMPORTING
        e_outtab_line  = &lt;lfs_s_outtab&gt;
      EXCEPTIONS
        node_not_found = 1
        OTHERS         = 2
    ).
    IF sy-subrc NE 0.
      &quot; Une erreur est survenue
      &quot;&quot;  --&gt; Passe à l&apos;itération suivante
      CONTINUE.

    ENDIF.

    &quot; Ajout de l&apos;entrée dans la table
    APPEND &lt;lfs_s_outtab&gt; TO &lt;lfs_t_outtab&gt;.

  ENDLOOP.

  &quot; -----------------------------------------------------------
  &quot; Détermination Emplacement de Sauvegarde
  &quot; -----------------------------------------------------------

  IF  NOT iv_filename IS INITIAL
  AND NOT iv_filepath IS INITIAL.
    &quot; Nom de fichier et Emplacement
    &quot;&quot;  --&gt; Initialisation Emplacement de Sauvegarde
    lv_filename = |{ iv_filepath }\\{ iv_filename }|.

  ELSE.
    &quot; Autres
    &quot;&quot;  --&gt; Détermination Emplacement de Sauvegarde
    cl_gui_frontend_services=&gt;file_save_dialog(
      EXPORTING
        default_extension         = &apos;.xlsx&apos;
        default_file_name         = CONV string( iv_filename )
        file_filter               = &apos;*.xlsx&apos;
        initial_directory         = CONV string( iv_filepath )
      CHANGING
        filename                  = lv_filename
        path                      = lv_path
        fullpath                  = lv_fullpath
      EXCEPTIONS
        cntl_error                = 1
        error_no_gui              = 2
        not_supported_by_gui      = 3
        invalid_default_file_name = 4
        OTHERS                    = 5
    ).

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Contrôle
  &quot; -----------------------------------------------------------

  IF lv_filename IS INITIAL.
    &quot; Aucun nom de fichier déterminé
    &quot;&quot;  --&gt; Arrêt du traitement
    RETURN.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Export sous Excel
  &quot; -----------------------------------------------------------

  TRY.
      &quot; Création instance Excel
      CREATE OBJECT lo_excel.
      CREATE OBJECT lo_excel_writer.

      &quot; Récupération feuille de travail
      lo_worksheet = lo_excel-&gt;get_active_worksheet( ).
      IF NOT lo_worksheet IS BOUND.
        &quot; Aucune feuille de travail
        &quot;&quot;  --&gt; Création nouvelle feuille de travail
        lo_worksheet = lo_excel-&gt;add_new_worksheet( CONV zexcel_sheet_title( iv_worksheet_name ) ).

      ELSE.
        &quot; Renomme la feuille de travail
        lo_worksheet-&gt;set_title( ip_title = CONV zexcel_sheet_title( iv_worksheet_name ) ).

      ENDIF.

      &quot; Initialisation propriétées
      ls_table_settings-top_left_row = 1.
      ls_table_settings-top_left_column = &apos;A&apos;.

      &quot; Pousse la table dans la feuille de travail
      lo_worksheet-&gt;bind_table(
          ip_table          = &lt;lfs_t_outtab&gt;
          is_table_settings = ls_table_settings
      ).

      &quot; Transforme le fichier en binaire
      lv_xstring = lo_excel_writer-&gt;zif_excel_writer~write_file( io_excel = lo_excel ).
      lt_solix   = cl_bcs_convert=&gt;xstring_to_solix( iv_xstring = lv_xstring ).
      lv_xstrlen = xstrlen( lv_xstring ).

      &quot; Enregistre le fichier
      cl_gui_frontend_services=&gt;gui_download(
        EXPORTING
          bin_filesize              = lv_xstrlen
          filename                  = lv_filename
          filetype                  = &apos;BIN&apos;
        CHANGING
          data_tab                  = lt_solix
        EXCEPTIONS
          file_write_error          = 1
          no_batch                  = 2
          gui_refuse_filetransfer   = 3
          invalid_type              = 4
          no_authority              = 5
          unknown_error             = 6
          header_not_allowed        = 7
          separator_not_allowed     = 8
          filesize_not_allowed      = 9
          header_too_long           = 10
          dp_error_create           = 11
          dp_error_send             = 12
          dp_error_write            = 13
          unknown_dp_error          = 14
          access_denied             = 15
          dp_out_of_memory          = 16
          disk_full                 = 17
          dp_timeout                = 18
          file_not_found            = 19
          dataprovider_exception    = 20
          control_flush_error       = 21
          not_supported_by_gui      = 22
          error_no_gui              = 23
          OTHERS                    = 24
      ).

      &quot; Retourne le code retour
      rv_subrc = sy-subrc.

    CATCH zcx_excel.
      &quot; Une erreur est survenue
      &quot;&quot;  --&gt; Initialisation code retour en erreur
      rv_subrc = 4.

  ENDTRY.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="HIERARCHY_USAGE" VERSION="1" LANGU="F" DESCRIPT="Exploitation de la Hiérarchie" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="HIERARCHY_USAGE" SCONAME="IS_DATA" VERSION="1" LANGU="F" DESCRIPT="Données source" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="HIERARCHY_USAGE" SCONAME="IS_HIERARCHY" VERSION="1" LANGU="F" DESCRIPT="Hiérarchie" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_HIERARCHY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="HIERARCHY_USAGE" SCONAME="ES_NODE_DATA" VERSION="1" LANGU="F" DESCRIPT="Données à afficher" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="HIERARCHY_USAGE" SCONAME="EV_NODE_TEXT" VERSION="1" LANGU="F" DESCRIPT="Texte du Noeud" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="HIERARCHY_USAGE" SCONAME="EV_NODE_LEVEL_KEY" VERSION="1" LANGU="F" DESCRIPT="Clef niveau de Noeud" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE"/>
   <source>METHOD hierarchy_usage.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_data TYPE REF TO data.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
  FIELD-SYMBOLS :
    &lt;lfs_node_data&gt; TYPE any.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Exploitation des données de la Hiérarchie
  &quot; -----------------------------------------------------------

  &quot; Initialisation des données à afficher
  lo_data = zcl_gui_alv_tree_util=&gt;display_data_set(
    is_data               = is_data
    it_component_display  = is_hierarchy-t_component_display
    it_component_excluded = is_hierarchy-t_component_excluded
  ).

  &quot; Initialisation pointeur sur les données
  ASSIGN lo_data-&gt;* TO &lt;lfs_node_data&gt;.

  &quot; Retourne les données
  es_node_data = &lt;lfs_node_data&gt;.

  IF ev_node_text IS SUPPLIED.
    &quot; -----------------------------------------------------------
    &quot; Retourne Texte du Noeud
    &quot; -----------------------------------------------------------

    &quot; Retourne Texte du Noeud
    ev_node_text = zcl_gui_alv_tree_util=&gt;_node_text_set(
      is_data      = is_data
      is_hierarchy = is_hierarchy
    ).

  ENDIF.

  IF  ev_node_level_key IS SUPPLIED
  AND NOT is_hierarchy-node_level_key_fieldname IS INITIAL.
    &quot; -----------------------------------------------------------
    &quot; Retourne Clef niveau de Noeud
    &quot; -----------------------------------------------------------

    ASSIGN COMPONENT is_hierarchy-node_level_key_fieldname
        OF STRUCTURE is_data
                  TO FIELD-SYMBOL(&lt;lfs_node_level_key&gt;).
    ev_node_level_key = &lt;lfs_node_level_key&gt;.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_ADD_RECURSIVE" VERSION="1" LANGU="F" DESCRIPT="Création du Noeud (Récursif)" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_ADD_RECURSIVE" SCONAME="IS_NODE_DATA" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_NODE_DATA" PARPREFERD="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_ADD_RECURSIVE" SCONAME="IV_PARENT_NODE_KEY" VERSION="1" LANGU="F" DESCRIPT="Contrôle d&apos;arbre ALV : clé de noeud" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_NKEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_ADD_RECURSIVE" SCONAME="IV_PARENT_NODE_TEXT" VERSION="1" LANGU="F" DESCRIPT="Texte Noeud Parent" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_ADD_RECURSIVE" SCONAME="IV_FILL_LEVEL_NODE_KEY" VERSION="1" LANGU="F" DESCRIPT="Alimentation table des niveaux ?" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_ADD_RECURSIVE" SCONAME="CT_LEVEL_NODE_KEY" VERSION="1" LANGU="F" DESCRIPT="Table des niveaux" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_T_LEVEL_NODE_KEY" PAROPTIONL="X"/>
   <source>METHOD node_add_recursive.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : NODE_ADD_RECURSIVE                                *
*&amp; Classe          : ZCL_GUI_ALV_TREE_UTIL                             *
*&amp; Description     : Création Noeud dans l&apos;ALV Tree (récursif)         *
*&amp; Description     : Création Noeud dans l&apos;ALV Tree (récursif)         *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 28/01/2016                                           *
*                                                                      *
*&amp; Responsable Technique  : Véhier Olivier                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_level_node_key TYPE ty_level_node_key.

***------------------------------------------------------------------***
**                            VARIABLES                               **
***------------------------------------------------------------------***
  DATA :
    lv_new_node_key    TYPE lvc_nkey,
    lv_parent_node_key TYPE lvc_nkey.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
  FIELD-SYMBOLS :
    &lt;lfs_node_data&gt; TYPE any.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Création du Noeud
  &quot; -----------------------------------------------------------

  &quot; Initialisation pointeur sur les données
  ASSIGN is_node_data-node_data-&gt;* TO &lt;lfs_node_data&gt;.

  &quot; Création Noeud entête
  me-&gt;mo_alv_tree-&gt;add_node(
    EXPORTING
      i_relat_node_key     = iv_parent_node_key
      i_relationship       = cl_gui_column_tree=&gt;relat_last_child
      is_outtab_line       = &lt;lfs_node_data&gt;
      is_node_layout       = is_node_data-node_layout
      it_item_layout       = is_node_data-t_item_layout
      i_node_text          = is_node_data-node_text
   IMPORTING
     e_new_node_key        = lv_new_node_key
    EXCEPTIONS
      relat_node_not_found = 1
      node_not_found       = 2
      OTHERS               = 3
  ).

  IF  iv_fill_level_node_key EQ abap_true
  AND ct_level_node_key      IS SUPPLIED.
    &quot; Ajout du niveau de la Clef
    ls_level_node_key-node_key  = lv_new_node_key.
    ls_level_node_key-node_text = is_node_data-node_text.
    ls_level_node_key-fieldname = is_node_data-fieldname.
    IF iv_parent_node_text IS INITIAL.
      &quot; Initialisation Texte
      ls_level_node_key-node_text_complete = ls_level_node_key-node_text.

    ELSE.
      &quot; Concaténation Texte (complet)
      ls_level_node_key-node_text_complete = |{ iv_parent_node_text }{ ls_level_node_key-node_text_complete }|.

    ENDIF.

    ls_level_node_key-node_level_key  = is_node_data-node_level_key.
    ls_level_node_key-parent_node_key = iv_parent_node_key.
    INSERT ls_level_node_key INTO TABLE ct_level_node_key.

  ENDIF.

  IF is_node_data-has_child EQ abap_true.
    &quot; -----------------------------------------------------------
    &quot; Création Noeud(s) Enfant
    &quot; -----------------------------------------------------------

    &quot; Récupération position première entrée correspondant aux enfants
    READ TABLE me-&gt;mt_node_data WITH KEY parent_node_id = is_node_data-node_id
                            TRANSPORTING NO FIELDS BINARY SEARCH.
    IF sy-subrc EQ 0.
      &quot; Parcours des enfants
      LOOP AT me-&gt;mt_node_data ASSIGNING FIELD-SYMBOL(&lt;lfs_s_child_node_data&gt;)
                  FROM sy-tabix.

        IF &lt;lfs_s_child_node_data&gt;-parent_node_id NE is_node_data-node_id.
          &quot; On ne traite plus le même Noeud Parent
          &quot;&quot;  --&gt; Arrêt de la boucle
          EXIT.

        ENDIF.

        &quot; Création du Noeud
        me-&gt;node_add_recursive(
          EXPORTING
            is_node_data           = &lt;lfs_s_child_node_data&gt;
            iv_parent_node_key     = lv_new_node_key
            iv_parent_node_text    = ls_level_node_key-node_text_complete
            iv_fill_level_node_key = iv_fill_level_node_key
          CHANGING
            ct_level_node_key      = ct_level_node_key
        ).

        &quot; Suppression de l&apos;entrée
        DELETE me-&gt;mt_node_data USING KEY loop_key.

      ENDLOOP.

    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" VERSION="1" LANGU="F" DESCRIPT="Ajout d&apos;élèments dans le Noeud" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" SCONAME="IS_DATA" VERSION="1" LANGU="F" DESCRIPT="Données à afficher" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" SCONAME="IV_NODE_TEXT" VERSION="1" LANGU="F" DESCRIPT="Texte du Noeud" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" SCONAME="IV_HAS_CHILD" VERSION="1" LANGU="F" DESCRIPT="Possède des enfants ?" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" SCONAME="IV_FIELDNAME" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" SCONAME="IS_NODE_LAYOUT" VERSION="1" LANGU="F" DESCRIPT="Contrôle arbre ALV : mise en page noeuds" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_S_LAYN" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" SCONAME="IT_ITEM_LAYOUT" VERSION="1" LANGU="F" DESCRIPT="Contrôle arbre ALV : structure de mise en page des items" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_T_LAYI" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" SCONAME="IV_NODE_LEVEL_KEY" VERSION="1" LANGU="F" DESCRIPT="Clef niveau de Noeud" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" SCONAME="IV_PARENT_NODE_ID" VERSION="1" LANGU="F" DESCRIPT="ID Noeud Parent" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUUID_X16" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="NODE_DATA_ADD" SCONAME="RV_NODE_ID" VERSION="1" LANGU="F" DESCRIPT="ID Noeud" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYSUUID_X16"/>
   <source>METHOD node_data_add.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : NODE_DATA_ADD                                     *
*&amp; Classe          : ZCL_GUI_ALV_TREE_UTIL                             *
*&amp; Description     : Alimentation table interne des Noeuds à créer     *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 28/01/2016                                           *
*                                                                      *
*&amp; Responsable Technique  : Véhier Olivier                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_key       TYPE ty_key,
    ls_node_data TYPE ty_node_data.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_abap_structdescr TYPE REF TO cl_abap_structdescr.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
  FIELD-SYMBOLS :
    &lt;lfs_key_value&gt; TYPE any,
    &lt;lfs_node_data&gt; TYPE any.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Création nouveau Noeud
  &quot; -----------------------------------------------------------

  &quot; Récupération description
  lo_abap_structdescr ?= cl_abap_structdescr=&gt;describe_by_data( p_data = is_data ).

  &quot; Création de la données
  CREATE DATA ls_node_data-node_data TYPE HANDLE lo_abap_structdescr.
  ASSIGN ls_node_data-node_data-&gt;* TO &lt;lfs_node_data&gt;.

  &quot; Initialisation des données
  &lt;lfs_node_data&gt;             = is_data.
  ls_node_data-node_id        = rv_node_id = cl_system_uuid=&gt;create_uuid_x16_static( ).
  ls_node_data-has_child      = iv_has_child.
  ls_node_data-fieldname      = iv_fieldname.
  ls_node_data-node_text      = iv_node_text.
  ls_node_data-node_layout    = is_node_layout.
  ls_node_data-t_item_layout  = it_item_layout.
  ls_node_data-node_level_key = iv_node_level_key.
  ls_node_data-parent_node_id = iv_parent_node_id.

  &quot; Ajout du Noeud
  INSERT ls_node_data INTO TABLE me-&gt;mt_node_data.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="_NODE_TEXT_SET" VERSION="1" LANGU="F" DESCRIPT="Initialisation Texte du Noeud" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="_NODE_TEXT_SET" SCONAME="IS_DATA" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="_NODE_TEXT_SET" SCONAME="IS_HIERARCHY" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_HIERARCHY"/>
   <parameter CLSNAME="ZCL_GUI_ALV_TREE_UTIL" CMPNAME="_NODE_TEXT_SET" SCONAME="RV_NODE_TEXT" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD _node_text_set.

***------------------------------------------------------------------***
**                             TABLES                                 **
***------------------------------------------------------------------***
  DATA :
      lt_node_text_dynamic TYPE zcl_gui_alv_tree_util=&gt;tt_node_text_dynamic.

***------------------------------------------------------------------***
**                            VARIABLES                               **
***------------------------------------------------------------------***
  DATA :
    lv_node_text TYPE string,
    lv_separator TYPE string.

***==================================================================***
**                             TRAITEMENT                             **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Initialisation Texte du Noeud
  &quot; -----------------------------------------------------------

  IF NOT is_hierarchy-node_text_fixed IS INITIAL.
    &quot; Texte fixe
    &quot;&quot;  --&gt; Utilisation du Texte fournis
    rv_node_text = is_hierarchy-node_text_fixed.

  ELSE.
    &quot; Texte dynamique
    IF NOT is_hierarchy-node_text_dynamic[] IS INITIAL.
      &quot; Table de champs à utiliser
      &quot;&quot;  --&gt; Utilisation de ces champs
      lt_node_text_dynamic[] = is_hierarchy-node_text_dynamic[].

    ELSE.
      &quot; Aucun texte défini
      &quot;&quot;  --&gt; Utilisation du champ relatif au Noeud
      APPEND VALUE #(
        fieldname = is_hierarchy-fieldname
        alpha_in  = is_hierarchy-node_text_alpha_in
      ) TO lt_node_text_dynamic.

    ENDIF.

    &quot; Texte dynamique
    LOOP AT lt_node_text_dynamic
      ASSIGNING FIELD-SYMBOL(&lt;lfs_s_node_text_dyn&gt;).

      IF &lt;lfs_s_node_text_dyn&gt;-separator IS INITIAL.
        &quot; Pas de séparateur
        &quot;&quot;  --&gt; Ajoute un espace
        lv_separator = &apos; &apos;.                                 &quot;#EC NOTEXT

      ELSE.
        &quot; Séparateur défini
        &quot;&quot;  --&gt; Utilisation de ce séparateur
        lv_separator = &lt;lfs_s_node_text_dyn&gt;-separator.

      ENDIF.

      &quot; Initialisation Texte à afficher à la valeur du champ relatif au Noeud
      ASSIGN COMPONENT &lt;lfs_s_node_text_dyn&gt;-fieldname
          OF STRUCTURE is_data
                    TO FIELD-SYMBOL(&lt;lfs_node_text&gt;).
      IF sy-subrc NE 0 OR (
        &lt;lfs_node_text&gt; IS INITIAL AND &lt;lfs_s_node_text_dyn&gt;-even_if_empty EQ abap_false
        ).
        &quot; Champ inexistant
        &quot;&quot;  --&gt; Passe à l&apos;itération suivante
        CONTINUE.

      ENDIF.

      IF &lt;lfs_s_node_text_dyn&gt;-alpha_in EQ abap_false.
        &quot; Affichage Format Externe
        lv_node_text = |{ &lt;lfs_node_text&gt; ALPHA = OUT }|.

      ELSE.
        &quot; Texte Format Interne
        lv_node_text = &lt;lfs_node_text&gt;.

      ENDIF.

      IF &lt;lfs_s_node_text_dyn&gt;-condense EQ abap_true.
        &quot; Concaténation sans espace
        CONDENSE lv_node_text.

      ENDIF.

      IF rv_node_text IS INITIAL.
        &quot; Pas de texte
        &quot;&quot;  --&gt; Affichage Format Interne
        rv_node_text = lv_node_text.

      ELSE.
        &quot; Texte déjà initialisé
        &quot;&quot;  --&gt; Concaténation
        rv_node_text = |{ rv_node_text }{ lv_separator }{ lv_node_text }|.

      ENDIF.

    ENDLOOP.

  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
